function [LeftGamma, RightGamma] = SCNI_AnalyseLuminances(LumFile,fitType,SaveCLUT)

%======================== SCNI_AnalyseLuminances.m ========================
% Analyses luminance measurements generated by LuminanceCal.m, which are
% saved in the .mat file specified by the input variable LumFile. Data is 
% displayed in a figure containing the following subplots:
%       1) Raw luminance data
%       2) Normalized mean luminance 
%       3) Gamma curve
%       4) Gamma correction
% Linearized gamma lookup tables are generated for each display.
%
%     fitType == 1:  Power function
%     fitType == 2:  Extended power function
%     fitType == 3:  Sigmoid
%     fitType == 4:  Weibull
%     fitType == 5:  Modified polynomial
%     fitType == 6:  Linear interpolation
%     fitType == 7:  Cubic spline
%
%     ___  ______  __   __
%    /   ||  __  \|  \ |  \    APM SUBFUNCTIONS
%   / /| || |__/ /|   \|   \   Aidan P. Murphy - murphyap@mail.nih.gov
%  / __  ||  ___/ | |\   |\ \  Section on Cognitive Neurophysiology and Imaging
% /_/  |_||_|     |_| \__| \_\ National Institute of Mental Health
%==========================================================================

if nargin < 1
    Default = cd;
    [Filename Pathname Ind] = uigetfile('*.mat', 'Select luminance data', Default);
    LumFile = fullfile(Pathname, Filename);
end
load(LumFile);
if nargin < 2, fitType = 1;end            % extended power function
if nargin < 3, SaveCLUT = 0;end           % save CLUT?

h           = figure;
Lum(1).Time = datestr(now,29);
FigTitle    = sprintf('%s luminance calibration (%s)', Lum(1).DisplayName, Lum(1).Time);
T           = suptitle(FigTitle);
f(1)        = subplot(2,2,1);  
PlotColor   = {'*r','.b'};
LineColor   = {'-c','-m'};
for D = 1:numel(Lum)
    Results = sortrows([Lum(D).SampleOrder, Lum(D).Measurement'],1);
%     if D == 1
%         Results(6,2) = mean(Results([5,7],2));
%         Results(210,2) = mean(Results([209,211],2));                                                           % Clear input errors from measurements
%     end
    
    Levels = unique(Results(:,1));
    if Lum(D).SamplesPerLevel == 1
        MeanLuminances(:,D) = Results(:,2);                                            
    elseif Lum(D).SamplesPerLevel > 1
        Luminances = reshape(Results(:,2),[Lum(D).SamplesPerLevel,numel(Lum(D).Levels)]);
        MeanLuminances(:,D) = mean(Luminances);
        SELuminances = std(Luminances)/sqrt(Lum(D).SamplesPerLevel);
        StdErrorUpper = MeanLuminances(:,D)+SELuminances';
        StdErrorLower = MeanLuminances(:,D)-SELuminances';
        shadedplot(Levels, StdErrorUpper, StdErrorLower, [0.5 0.5 0.5], 'k');
        hold on;
    end
    MaxLuminance(D) = MeanLuminances(end,D);
    MinLuminance(D) = MeanLuminances(1,D);
    Range(D) = range(MeanLuminances(:,D));
    
    %================= APPLY FIT TO DATA
    [b,a]=butter(1,0.085,'low');                                        % Butterworth filter @ Nyquist frequency x 0.01 = cutoff frequency 5Hz
    FilteredData(:,D) = filtfilt(b,a, MeanLuminances(:,D));          	% Apply filtering with zero phase lag
    plot(Levels, MeanLuminances(:,D), PlotColor{D});
    hold on;
    plot(Levels, FilteredData(:,D), ['-',PlotColor{D}(2)]);
    LegendText{D} = Lum(D).DisplayName;
end
xlabel('Pixel Intensity','fontsize', 16);                             	% Add axis labels
ylabel('Luminance (cd/m^2)','fontsize', 16);
LegendText
%legend(LegendText, 'Location','NorthWest');
title('Luminance measurements','fontsize', 18);
box off;
grid on;

%================= NORMALIZE LUMINANCE BETWEEN DISPLAYS ===================
MaxLumDisplay = find(MaxLuminance==max(MaxLuminance));  	% Find which display has the maximum luminance
MinLumDisplay = find(MinLuminance==min(MinLuminance));      % Find which display has the minimum luminance
NormMinLumDiff = abs(diff(MinLuminance))/255;             	% Calculate the difference in minimum luminances

NormMaxLumFactor = min(MaxLuminance)/max(MaxLuminance); 

% NormLuminances = MeanLuminances-max(MinLuminance);


f(2) = subplot(2,2,2);   
for D = 1:numel(Lum)
    NormLuminances(:,D) = MeanLuminances(:,D)-MinLuminance(D);                 	% Normalize baseline to 0
    NormLuminances(:,D) = NormLuminances(:,D)/max(NormLuminances(:,D));         % Normalize max to 1
    plot(Levels, NormLuminances(:,D), PlotColor{D});
    hold on;
    [extendedFit{D},extendedX{D}] = FitGamma(Levels,NormLuminances(:,D),Levels,fitType);
    plot(Levels,extendedFit{D},LineColor{D},'LineWidth',2);                                       	% curve fit results
end
xlabel('Pixel Intensity');                 
ylabel('Normalized luminance');
Title('Power function fit');
box off;

% D = MinLumDisplay;
%     NormLuminances(:,D) = NormLuminances(:,D)-NormMinLumDiff;    	% Re-scale data
%     extendedFit{D} = extendedFit{D}+NormMinLumDiff;                 % Re-scale fit

% D = MaxLumDisplay;
%     NormLuminances(:,D) = NormLuminances(:,D)*NormMaxLumFactor;                 
%     extendedFit{D} = extendedFit{D}*NormMaxLumFactor;
%     invertedRamp(:,D) = invertedRamp(:,D)*NormMaxLumFactor;

%======================== INVERSE GAMMA TABLE =============================
LumRamp = 0:1/255:1;
f(3) = subplot(2,2,3);   
for D = 1:numel(Lum)
    pow = extendedX{D}(1);
    offset = 0;%extendedX{D}(2);
    invertedRamp(:,D) =((MaxLuminance(D)-offset)*(LumRamp.^(1/pow)))+offset;    % invert gamma w/o rounding
    invertedRamp(:,D) = invertedRamp(:,D)./max(invertedRamp(:,D));              % normalize inverse gamma table
    inverseCLUT{D} = repmat(invertedRamp(:,D),1,3);
    plot(Levels, invertedRamp(:,D), PlotColor{D});
    hold on
end
xlabel('Pixel Intensity');                  
ylabel('Inverse gamma');
Title('Inverse gamma function');
box off;

%=========== Normalize values between multiple displays
D = MaxLumDisplay;
    NormLuminances(:,D) = NormLuminances(:,D)*NormMaxLumFactor;                 
    extendedFit{D} = extendedFit{D}*NormMaxLumFactor;
    invertedRamp(:,D) = invertedRamp(:,D)*NormMaxLumFactor;
    inverseCLUT{D} = inverseCLUT{D}*NormMaxLumFactor;

%======================== PREDICTED LUMINANCES ============================
f(4) = subplot(2,2,4);
plot([0 255],[max(MinLuminance) min(MaxLuminance)],'-k');
hold on;
for D = 1:numel(Lum)
    CLUTlevels(:,D) = round(abs(invertedRamp(:,D)*255))+1;
    plot(Levels, MeanLuminances(CLUTlevels(:,D),D), PlotColor{D});
end
xlabel('Pixel Intensity');                  
ylabel('Predicted luminance (cd/m^2)');
Title('Predicted linearized luminances');
box off;

set(f([2,3]),'ylim',[0 1]);
set(f, 'xlim',[0 255]);
set(f,'XTick', 0:50:250);
set(f,'TickDir','out');

%======= Check values
extendedX{1}(:)
extendedX{2}(:)
MeanLuminances([1,end],:)
MeanLuminances(CLUTlevels([1,end],:),:)


if SaveCLUT
    CLUTfile = sprintf('CLUT_%s_%s', datestr(now,29),Filename);
    save(CLUTfile, 'inverseCLUT', 'Lum');
end