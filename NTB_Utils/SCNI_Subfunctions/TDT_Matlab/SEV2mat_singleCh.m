function [rawdata, fs] = SEV2mat_singleCh(SEV_FILE)
%SEV2MAT  TDT SEV file format extraction.
%   data = SEV2mat_singleCh(SEV_FILE), where SEV_FILE is a string, 
%   retrieves a sev data from specified file. SEV files
%   are generated by an RS4 Data Streamer, or by setting the Unique
%   Channel Files option in Stream_Store_MC or Stream_Store_MC2 macro
%   to Yes.
%
%   data    contains all continuous data (sampling rate and raw data)
%
%   modified from SEV2mat from TDT, by Kenji Koyano
%   last modified: 150803


data = [];

ALLOWED_FORMATS = {'single','int32','int16','int8','double','int64'};

% open file
fid = fopen(SEV_FILE, 'rb');

if fid < 0
    warning([SEV_FILE ' not opened'])
    return
end
    
% create and fill streamHeader struct
streamHeader = [];

streamHeader.fileSizeBytes   = fread(fid,1,'uint64');
streamHeader.fileType        = char(fread(fid,3,'char')');
streamHeader.fileVersion     = fread(fid,1,'char');

if streamHeader.fileVersion < 3
    
    % event name of stream
    if streamHeader.fileVersion == 2
        streamHeader.eventName  = char(fread(fid,4,'char')');
    else
        streamHeader.eventName  = fliplr(char(fread(fid,4,'char')'));
    end
    
    % current channel of stream
    streamHeader.channelNum        = fread(fid, 1, 'uint16');
    % total number of channels in the stream
    streamHeader.totalNumChannels  = fread(fid, 1, 'uint16');
    % number of bytes per sample
    streamHeader.sampleWidthBytes  = fread(fid, 1, 'uint16');
    reserved                 = fread(fid, 1, 'uint16');
    
    % data format of stream in lower four bits
    streamHeader.dForm      = ALLOWED_FORMATS{bitand(fread(fid, 1, 'uint8'),7)+1};
    
    % used to compute actual sampling rate
    streamHeader.decimate   = fread(fid, 1, 'uint8');
    streamHeader.rate       = fread(fid, 1, 'uint16');
    
    % reserved tags
    reserved = fread(fid, 1, 'uint64');
    reserved = fread(fid, 2, 'uint16');
    
else
    error(['unknown version ' num2str(streamHeader.fileVersion)]);
end
    
%varname = matlab.lang.makeValidName(streamHeader.eventName);
varname = streamHeader.eventName;
for ii = 1:numel(varname)
    if ii == 1
        if isnumeric(varname(ii))
            varname(ii) = 'x';
        end
    end
    if ~isletter(varname(ii)) && ~isnumeric(varname(ii))
        varname(ii) = '_';
    end
end
% if ~isvarname(streamHeader.eventName)
%     warning('%s is not a valid Matlab variable name, changing to %s', streamHeader.eventName, varname);
% end

if streamHeader.fileVersion > 0
    % determine data sampling rate
    streamHeader.fs = 2^(streamHeader.rate)*25000000/2^12/streamHeader.decimate;
    % handle multiple data streams in one folder
    exists = isfield(data, varname);
else
    streamHeader.dForm = 'single';
    streamHeader.fs = 0;
    s = regexp(file_list(i).name, '_', 'split');
    streamHeader.eventName = s{end-1};
    %varname = matlab.lang.makeValidName(streamHeader.eventName);
    varname = streamHeader.eventName;
    for ii = 1:numel(varname)
        if ii == 1
            if isnumeric(varname(ii))
                varname(ii) = 'x';
            end
        end
        if ~isletter(varname(ii)) && ~isnumeric(varname(ii))
            varname(ii) = '_';
        end
    end
    
%     if ~isvarname(streamHeader.eventName)
%         warning('%s is not a valid Matlab variable name, changing to %s', streamHeader.eventName, varname);
%     end
    streamHeader.channelNum = str2double(regexp(s{end},  '\d+', 'match'));
    warning('%s has empty header; assuming %s ch %d format %s and fs = %.2f\nupgrade to OpenEx v2.18 or above\n', ...
        file_list(i).name, streamHeader.eventName, ...
        streamHeader.channelNum, streamHeader.dForm, 24414.0625);
    
    exists = 1;
    data.(varname).fs = 24414.0625;
end


% read rest of file into data array as correct format
varname = streamHeader.eventName;
for ii = 1:numel(varname)
    if ii == 1
        if isnumeric(varname(ii))
            varname(ii) = 'x';
        end
    end
    if ~isletter(varname(ii)) && ~isnumeric(varname(ii))
        varname(ii) = '_';
    end
end

varname = matlab.lang.makeValidName(streamHeader.eventName);
% if ~isvarname(streamHeader.eventName)
%     warning('%s is not a valid Matlab variable name, changing to %s', streamHeader.eventName, varname);
% end
data.(varname).name = streamHeader.eventName;
if exists ~= 1
    %preallocate data array
    temp_data = fread(fid, inf, ['*' streamHeader.dForm])';
    total_samples = length(temp_data);
    func = str2func(streamHeader.dForm);
    data.(varname).data = func(zeros(1,total_samples));
    data.(varname).data(1,:) = temp_data;
    data.(varname).fs = streamHeader.fs;
else
    data.(varname).data(1,:) = fread(fid, inf, ['*' streamHeader.dForm])';
end

rawdata = data.(varname).data;
fs = data.(varname).fs;

% close file
fclose(fid);